#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <map>
#include <algorithm>
#include <Windows.h>

using namespace std;
using namespace sf;

namespace dealer {
    // Структура для карты
    struct Card {
        string value;  // 2-10, J, Q, K, A
        string suit;   // D, H, S, C
    };

    map<string, Texture> card_textures;
    vector<Card> full_deck;
    vector<Card> current_deck;

    void reset_deck() {
        current_deck = full_deck;
        random_shuffle(current_deck.begin(), current_deck.end());
    }

    void initialize_deck() {
        vector<string> values = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A" };
        vector<string> suits = { "D", "H", "S", "C" };

// Создаем полную колоду и загружаем текстуры
        for (const auto& value : values) {
            for (const auto& suit : suits) {
                full_deck.push_back({ value, suit });
                Texture texture;
                string filename = "/" + value + suit + ".jpg";
                if (texture.loadFromFile(filename)) {
                    card_textures[value + suit] = texture;
                }
            }
        }

        reset_deck();
    }
Card draw_card() {
        if (current_deck.empty()) {
            reset_deck();
        }
        Card card = current_deck.back();
        current_deck.pop_back();
        return card;
    }

    int get_card_value(const Card& card) {
        if (card.value == "A") return 11;
        if (card.value == "K"  card.value == "Q"  card.value == "J") return 10;
        return stoi(card.value);
    }

    int get_card_values(const vector<Card>& cards) {
        int total = 0;
        int aces = 0;

        for (const Card& card : cards) {
            if (card.value == "A") {
                aces++;
                total += 11;
            }
            else {
                total += get_card_value(card);
            }
        }

        while (total > 21 && aces > 0) {
            total -= 10;
            aces--;
        }

        return total;
    }

    vector<Card> generate_dealer_cards() {
        vector<Card> cards = { draw_card(), draw_card() };
        while (get_card_values(cards) < 17) {
            cards.push_back(draw_card());
        }
        return cards;
    }

    Sprite get_card_sprite(const Card& card) {
        string key = card.value + card.suit;
        if (card_textures.find(key) != card_textures.end()) {
            Sprite sprite(card_textures[key]);
            sprite.setScale(0.5f, 0.5f);
            return sprite;
        }
        return Sprite();
    }
}
class Button {
public:
    Button(const string& text, float x, float y, Font& font, const Texture& buttonTexture) {
        button.setSize(Vector2f(300, 100));
        button.setPosition(x, y);
        button.setTexture(&buttonTexture);

        buttonText.setFont(font);
        buttonText.setString(text);
        buttonText.setCharacterSize(24);
        buttonText.setFillColor(Color::White);
        buttonText.setPosition(x + 10, y + 30);
    }

    void draw(RenderWindow& window) {
        window.draw(button);
        window.draw(buttonText);
    }

    bool isClicked(Vector2i mousePos) {
        return button.getGlobalBounds().contains(static_cast<float>(mousePos.x), static_cast<float>(mousePos.y));
    }
private:
    RectangleShape button;
    Text buttonText;
};
void reset_game(vector<dealer::Card>& dealer_cards, vector<dealer::Card>& player_cards, bool& gameEnded) {
    dealer_cards.clear();
    player_cards = { dealer::draw_card(), dealer::draw_card() };
    gameEnded = false;
}

int main() {
    setlocale(LC_ALL, "en_US.UTF-8");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    srand(static_cast<unsigned int>(time(NULL)));

    RenderWindow window(VideoMode(1280, 900), "Blackjack");
    window.setFramerateLimit(60);

    dealer::initialize_deck(); // Инициализация колоды

Texture button_texture;
    if (!button_texture.loadFromFile("/texture.png")) {
        cerr << "Error loading button texture" << endl;
        return -1;
    }

    vector<dealer::Card> dealer_cards;
    vector<dealer::Card> player_cards = { dealer::draw_card(), dealer::draw_card() };

    Font font;
    if (!font.loadFromFile("/arial.ttf")) {
        cerr << "Error loading font" << endl;
        return -1;
    }

    Button hitButton("Hit", 25, 800, font, button_texture);
    Button standButton("Stand", 335, 800, font, button_texture);
    Button restartButton("Restart", 470, 400, font, button_texture);
    bool gameEnded = false;

    while (window.isOpen()) {
        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
            else if (event.type == Event::MouseButtonPressed) {
                if (event.mouseButton.button == Mouse::Left) {
                    Vector2i mousePos = Mouse::getPosition(window);

                    if (hitButton.isClicked(mousePos) && !gameEnded) {
                        player_cards.push_back(dealer::draw_card());
                        if (dealer::get_card_values(player_cards) >= 21) {
                            gameEnded = true;
                        }
                    }

                    if (standButton.isClicked(mousePos) && !gameEnded) {
                        gameEnded = true;
                    }

                    if (restartButton.isClicked(mousePos) && gameEnded) {
                        reset_game(dealer_cards, player_cards, gameEnded);
                    }

                    if (gameEnded && dealer_cards.empty()) {
                        dealer_cards = dealer::generate_dealer_cards();
                    }
                }
            }
        }
window.clear(Color(100, 100, 100));

        // Отрисовка карт игрока
        int x = 25;
        int y = 60;
        for (size_t i = 0; i < player_cards.size(); i++) {
            Sprite card_sprite = dealer::get_card_sprite(player_cards[i]);
            card_sprite.setPosition(x + (i * (card_sprite.getGlobalBounds().width * 0.5f)), y);
            window.draw(card_sprite);
        }

        Text text;
        text.setFont(font);
        text.setCharacterSize(24);
        text.setFillColor(Color::Green);
        text.setString("Your Card Value: " + to_string(dealer::get_card_values(player_cards)));
        text.setPosition(25, 15);
        window.draw(text);

        if (gameEnded) {
            Text resultText;
            resultText.setFont(font);
            resultText.setCharacterSize(64);
            resultText.setPosition(400, 320);

            int dealer_total = dealer::get_card_values(dealer_cards);
            int player_total = dealer::get_card_values(player_cards);

            // Отрисовка карт дилера
            int x_card_dealer = 25;
            int y_card_dealer = 550;
            for (size_t i = 0; i < dealer_cards.size(); i++) {
                Sprite card_sprite = dealer::get_card_sprite(dealer_cards[i]);
                card_sprite.setPosition(x_card_dealer + (i * (card_sprite.getGlobalBounds().width * 0.5f)), y_card_dealer);
                window.draw(card_sprite);
            }

            Text dealer_text;
            dealer_text.setFont(font);
            dealer_text.setCharacterSize(24);
            dealer_text.setFillColor(Color::Red);
            dealer_text.setString("Dealer's Cards: " + to_string(dealer_total));
            dealer_text.setPosition(25, 500);
            window.draw(dealer_text);

            // Логика определения победителя остается прежней
            if (player_total == 21) {
                resultText.setFillColor(Color::Green);
                resultText.setString("You win! (Blackjack)");
            }
            else if (player_total > 21) {
                if (dealer_total > 21) {
                    resultText.setFillColor(Color::White);
                    resultText.setString("It's a tie!");
                }
                else {
                    resultText.setFillColor(Color::Red);
                    resultText.setString("You lost! (Bust)");
                }
            }
            else if (dealer_total > 21 || player_total > dealer_total) {
                resultText.setFillColor(Color::Green);
                resultText.setString("You win!");
            }
            else if (player_total < dealer_total) {
                resultText.setFillColor(Color::Red);
                resultText.setString("You lost!");
            }
            else {
                resultText.setFillColor(Color::White);
                resultText.setString("It's a tie!");
            }

            window.draw(resultText);
            restartButton.draw(window);
        }

        hitButton.draw(window);
        standButton.draw(window);

        window.display();
    }


    return 0;
}
